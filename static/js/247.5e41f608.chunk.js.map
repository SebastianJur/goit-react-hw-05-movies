{"version":3,"file":"static/js/247.5e41f608.chunk.js","mappings":"qQAMaA,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAeA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,qGACUC,EAAAA,EAAAA,GAAUP,GADpB,OACRG,EADQ,OAEdC,EAAaD,EAAUK,MAFT,2CAAH,qDAIbF,EAAQN,EACT,GAAE,CAACA,KAGF,iCACE,kCACA,wBACGG,EAAUM,KAAI,SAAAD,GAAI,OACjB,gBAAqBE,MAAO,CAAEC,UAAW,QAAzC,WACE,gBACED,MAAO,CAAEE,MAAO,QAASC,OAAQ,aACjCC,IAAKN,EAAKO,aAAL,0CAAuDP,EAAKO,cAA5D,2DACLC,IAAG,UAAKR,EAAKS,KAAV,kBAEL,uBAAIT,EAAKS,QACT,uCAAeT,EAAKU,gBAxBjBC,EAAAA,EAAAA,MAgBY,QAc1B,EAED,W,8LC1CIC,EAAS,mCAEAC,EAAa,mCAAG,6FACrBC,EADqB,kEAC4CF,EAD5C,6BAGFG,EAAAA,EAAAA,IAAA,UAAaD,IAHX,cAGnBE,EAHmB,yBAIlBA,EAASC,MAJS,gCAMzBC,QAAQC,MAAR,MANyB,yDAAH,qDAUbC,EAAY,mCAAG,WAAM5B,GAAN,gFACpBsB,EADoB,6CACwBtB,EADxB,oBAC2CoB,EAD3C,6BAGDG,EAAAA,EAAAA,IAAA,UAAaD,IAHZ,cAGlBE,EAHkB,yBAIjBA,EAASC,MAJQ,gCAMxBC,QAAQC,MAAR,MANwB,yDAAH,sDAUZpB,EAAS,mCAAG,WAAMP,GAAN,gFACjBsB,EADiB,6CAC2BtB,EAD3B,4BACsDoB,EADtD,6BAGEG,EAAAA,EAAAA,IAAA,UAAaD,IAHf,cAGfE,EAHe,yBAIdA,EAASC,MAJK,gCAMrBC,QAAQC,MAAR,MANqB,yDAAH,sDAUTE,EAAY,mCAAG,WAAM7B,GAAN,gFACpBsB,EADoB,6CACwBtB,EADxB,4BACmDoB,EADnD,6BAGDG,EAAAA,EAAAA,IAAA,UAAaD,IAHZ,cAGlBE,EAHkB,yBAIjBA,EAASC,KAAKK,SAJG,gCAMxBJ,QAAQC,MAAR,MANwB,yDAAH,sDAUZI,EAAW,mCAAG,WAAMC,GAAN,gFACnBV,EADmB,4DACwCF,EADxC,kBACwDY,GADxD,kBAGAT,EAAAA,EAAAA,IAAA,UAAaD,IAHb,cAGjBE,EAHiB,yBAIhBA,EAASC,KAAKK,SAJE,gCAMvBJ,QAAQC,MAAR,MANuB,yDAAH,qD,uDC1CjB,IAkBIR,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast/Cast.jsx","services/Api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { fetchCast } from '../../services/Api.js';\n\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  const createId = () => {\n    const id = nanoid();\n    return id;\n  };\n\n  useEffect(() => {\n    const getCast = async () => {\n      const movieCast = await fetchCast(movieId);\n      setMovieCast(movieCast.cast);\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Cast</h2>\n      <ul>\n        {movieCast.map(cast => (\n          <li key={createId()} style={{ listStyle: 'none' }}>\n            <img\n              style={{ width: '200px', border: '1px solid' }}\n              src={cast.profile_path ? `https://image.tmdb.org/t/p/w500/${cast.profile_path}` : `https://via.placeholder.com/220x330?text=Theres+no+photo`}\n              alt={`${cast.name}'s portrait`}\n            />\n            <p>{cast.name}</p>\n            <p>character: {cast.character}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\nlet ApiKey = '97d70a3173ca56d5850cad3599f6b1e5';\n\nexport const fetchTrending = async () => {\n  const URL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchDetails = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchSearch = async query => {\n  const URL = `https://api.themoviedb.org/3/search/movie?api_key=${ApiKey}&query=${query}`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Cast","movieId","useParams","useState","movieCast","setMovieCast","useEffect","getCast","fetchCast","cast","map","style","listStyle","width","border","src","profile_path","alt","name","character","nanoid","ApiKey","fetchTrending","URL","axios","response","data","console","error","fetchDetails","fetchReviews","results","fetchSearch","query","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}